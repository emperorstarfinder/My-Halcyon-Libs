// automatically generated by the FlatBuffers compiler, do not modify

namespace InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers
{

using System;
using FlatBuffers;

public struct SubMesh : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SubMesh GetRootAsSubMesh(ByteBuffer _bb) { return GetRootAsSubMesh(_bb, new SubMesh()); }
  public static SubMesh GetRootAsSubMesh(ByteBuffer _bb, SubMesh obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SubMesh __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MaterialIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int VerticesStart { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int VerticesCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IndexStart { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IndexCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SubMesh> CreateSubMesh(FlatBufferBuilder builder,
      int materialIndex = 0,
      int verticesStart = 0,
      int verticesCount = 0,
      int indexStart = 0,
      int indexCount = 0) {
    builder.StartObject(5);
    SubMesh.AddIndexCount(builder, indexCount);
    SubMesh.AddIndexStart(builder, indexStart);
    SubMesh.AddVerticesCount(builder, verticesCount);
    SubMesh.AddVerticesStart(builder, verticesStart);
    SubMesh.AddMaterialIndex(builder, materialIndex);
    return SubMesh.EndSubMesh(builder);
  }

  public static void StartSubMesh(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddMaterialIndex(FlatBufferBuilder builder, int materialIndex) { builder.AddInt(0, materialIndex, 0); }
  public static void AddVerticesStart(FlatBufferBuilder builder, int verticesStart) { builder.AddInt(1, verticesStart, 0); }
  public static void AddVerticesCount(FlatBufferBuilder builder, int verticesCount) { builder.AddInt(2, verticesCount, 0); }
  public static void AddIndexStart(FlatBufferBuilder builder, int indexStart) { builder.AddInt(3, indexStart, 0); }
  public static void AddIndexCount(FlatBufferBuilder builder, int indexCount) { builder.AddInt(4, indexCount, 0); }
  public static Offset<SubMesh> EndSubMesh(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SubMesh>(o);
  }
};


}
