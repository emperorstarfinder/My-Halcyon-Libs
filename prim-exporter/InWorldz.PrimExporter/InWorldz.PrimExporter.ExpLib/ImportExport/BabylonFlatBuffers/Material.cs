// automatically generated by the FlatBuffers compiler, do not modify

namespace InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers
{

using System;
using FlatBuffers;

public struct Material : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Material GetRootAsMaterial(ByteBuffer _bb) { return GetRootAsMaterial(_bb, new Material()); }
  public static Material GetRootAsMaterial(ByteBuffer _bb, Material obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Material __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public float Color(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ColorLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetColorBytes() { return __p.__vector_as_arraysegment(8); }
  public float ShinyPercent { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Alpha { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers.Texture? DiffuseTexture { get { int o = __p.__offset(14); return o != 0 ? (InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers.Texture?)(new InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers.Texture()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Material> CreateMaterial(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      VectorOffset colorOffset = default(VectorOffset),
      float shinyPercent = 0.0f,
      float alpha = 0.0f,
      Offset<InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers.Texture> diffuseTextureOffset = default(Offset<InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers.Texture>)) {
    builder.StartObject(6);
    Material.AddDiffuseTexture(builder, diffuseTextureOffset);
    Material.AddAlpha(builder, alpha);
    Material.AddShinyPercent(builder, shinyPercent);
    Material.AddColor(builder, colorOffset);
    Material.AddName(builder, nameOffset);
    Material.AddId(builder, idOffset);
    return Material.EndMaterial(builder);
  }

  public static void StartMaterial(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddColor(FlatBufferBuilder builder, VectorOffset colorOffset) { builder.AddOffset(2, colorOffset.Value, 0); }
  public static VectorOffset CreateColorVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static void StartColorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShinyPercent(FlatBufferBuilder builder, float shinyPercent) { builder.AddFloat(3, shinyPercent, 0.0f); }
  public static void AddAlpha(FlatBufferBuilder builder, float alpha) { builder.AddFloat(4, alpha, 0.0f); }
  public static void AddDiffuseTexture(FlatBufferBuilder builder, Offset<InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers.Texture> diffuseTextureOffset) { builder.AddOffset(5, diffuseTextureOffset.Value, 0); }
  public static Offset<Material> EndMaterial(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Material>(o);
  }
};


}
