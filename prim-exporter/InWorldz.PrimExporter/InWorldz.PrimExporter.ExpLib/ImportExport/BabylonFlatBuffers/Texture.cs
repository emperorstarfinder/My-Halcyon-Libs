// automatically generated by the FlatBuffers compiler, do not modify

namespace InWorldz.PrimExporter.ExpLib.ImportExport.BabylonFlatBuffers
{

using System;
using FlatBuffers;

public struct Texture : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Texture GetRootAsTexture(ByteBuffer _bb) { return GetRootAsTexture(_bb, new Texture()); }
  public static Texture GetRootAsTexture(ByteBuffer _bb, Texture obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Texture __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
  public bool HasAlpha { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Texture> CreateTexture(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      bool hasAlpha = false) {
    builder.StartObject(2);
    Texture.AddName(builder, nameOffset);
    Texture.AddHasAlpha(builder, hasAlpha);
    return Texture.EndTexture(builder);
  }

  public static void StartTexture(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddHasAlpha(FlatBufferBuilder builder, bool hasAlpha) { builder.AddBool(1, hasAlpha, false); }
  public static Offset<Texture> EndTexture(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Texture>(o);
  }
};


}
